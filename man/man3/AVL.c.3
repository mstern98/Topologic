.TH "src/AVL.c" 3 "Mon Mar 15 2021" "Version 1.0.6" "Topologic" \" -*- nroff -*-
.ad l
.nh
.SH NAME
src/AVL.c
.SH SYNOPSIS
.br
.PP
\fC#include '\&.\&./include/AVL\&.h'\fP
.br

.SS "Functions"

.in +1c
.ti -1c
.RI "struct \fBAVLTree\fP * \fBinit_avl\fP ()"
.br
.ti -1c
.RI "int \fBbalance\fP (struct \fBAVLNode\fP *node)"
.br
.ti -1c
.RI "int \fBmax_height\fP (struct \fBAVLNode\fP *node)"
.br
.ti -1c
.RI "struct \fBAVLNode\fP * \fBright_rotate\fP (struct \fBAVLNode\fP *node)"
.br
.ti -1c
.RI "struct \fBAVLNode\fP * \fBleft_rotate\fP (struct \fBAVLNode\fP *node)"
.br
.ti -1c
.RI "struct \fBAVLNode\fP * \fBcreate_node\fP (void *data, int id)"
.br
.ti -1c
.RI "struct \fBAVLNode\fP * \fBinsert_node\fP (struct \fBAVLNode\fP *node, struct \fBAVLNode\fP *\fBinsert\fP)"
.br
.ti -1c
.RI "int \fBinsert\fP (struct \fBAVLTree\fP *tree, void *data, int id)"
.br
.ti -1c
.RI "void * \fBfind_node\fP (struct \fBAVLNode\fP *root, int id)"
.br
.ti -1c
.RI "void * \fBfind\fP (struct \fBAVLTree\fP *tree, int id)"
.br
.ti -1c
.RI "struct \fBAVLNode\fP * \fBminNode\fP (struct \fBAVLNode\fP *node)"
.br
.ti -1c
.RI "struct \fBAVLNode\fP * \fBremove_node\fP (struct \fBAVLNode\fP *root, int id, void **data)"
.br
.ti -1c
.RI "void * \fBremove_ID\fP (struct \fBAVLTree\fP *tree, int id)"
.br
.ti -1c
.RI "void \fBinorder_nodes\fP (struct \fBAVLNode\fP *node, struct \fBstack\fP *\fBstack\fP)"
.br
.ti -1c
.RI "void \fBinorder\fP (struct \fBAVLTree\fP *tree, struct \fBstack\fP *\fBstack\fP)"
.br
.ti -1c
.RI "void \fBpreorder_nodes\fP (struct \fBAVLNode\fP *node, struct \fBstack\fP *\fBstack\fP)"
.br
.ti -1c
.RI "void \fBpreorder\fP (struct \fBAVLTree\fP *tree, struct \fBstack\fP *\fBstack\fP)"
.br
.ti -1c
.RI "void \fBpostorder_nodes\fP (struct \fBAVLNode\fP *node, struct \fBstack\fP *\fBstack\fP)"
.br
.ti -1c
.RI "void \fBpostorder\fP (struct \fBAVLTree\fP *tree, struct \fBstack\fP *\fBstack\fP)"
.br
.ti -1c
.RI "void \fBstackify_nodes\fP (struct \fBAVLNode\fP *node, struct \fBstack\fP *\fBstack\fP)"
.br
.ti -1c
.RI "void \fBstackify\fP (struct \fBAVLTree\fP *tree, struct \fBstack\fP *\fBstack\fP)"
.br
.ti -1c
.RI "void \fBdestroy_avl_nodes\fP (struct \fBAVLNode\fP *node)"
.br
.ti -1c
.RI "void \fBdestroy_avl\fP (struct \fBAVLTree\fP *tree)"
.br
.in -1c
.SH "Function Documentation"
.PP 
.SS "int balance (struct \fBAVLNode\fP * node)"

.PP
References AVLNode::height, AVLNode::left, and AVLNode::right\&.
.PP
Referenced by insert_node(), and remove_node()\&.
.SS "struct \fBAVLNode\fP* create_node (void * data, int id)"

.PP
References AVLNode::data, AVLNode::height, AVLNode::id, AVLNode::left, and AVLNode::right\&.
.PP
Referenced by insert()\&.
.SS "void destroy_avl (struct \fBAVLTree\fP * tree)"

.PP
References destroy_avl_nodes(), AVLTree::root, and AVLTree::size\&.
.PP
Referenced by create_vertex(), destroy_graph_avl(), graph_init(), and main()\&.
.SS "void destroy_avl_nodes (struct \fBAVLNode\fP * node)"

.PP
References AVLNode::data, AVLNode::height, AVLNode::left, and AVLNode::right\&.
.PP
Referenced by destroy_avl()\&.
.SS "void* find (struct \fBAVLTree\fP * tree, int id)"

.PP
References find_node(), and AVLTree::root\&.
.PP
Referenced by cleanup(), create_edge(), init(), main(), modify_edge(), remove_vertex_id(), setupEdges(), setupSelfEdge(), start_set(), test_delete(), test_find(), test_graph_add_bi_edge(), test_graph_add_edge(), test_graph_modify_bi_edge(), test_graph_modify_edge(), test_graph_modify_vertex(), test_graph_remove_bi_edge(), test_graph_remove_edge(), and test_graph_remove_vertex()\&.
.SS "void* find_node (struct \fBAVLNode\fP * root, int id)"

.PP
References AVLNode::data, AVLNode::id, AVLNode::left, and AVLNode::right\&.
.PP
Referenced by find()\&.
.SS "struct \fBAVLTree\fP* init_avl ()"

.PP
References AVLTree::root, and AVLTree::size\&.
.PP
Referenced by create_vertex(), graph_init(), and main()\&.
.SS "void inorder (struct \fBAVLTree\fP * tree, struct \fBstack\fP * stack)"

.PP
References inorder_nodes(), AVLTree::root, and AVLTree::size\&.
.PP
Referenced by print_state(), test_delete(), and test_inorder()\&.
.SS "void inorder_nodes (struct \fBAVLNode\fP * node, struct \fBstack\fP * stack)"

.PP
References AVLNode::data, AVLNode::id, AVLNode::left, push(), and AVLNode::right\&.
.PP
Referenced by inorder()\&.
.SS "int insert (struct \fBAVLTree\fP * tree, void * data, int id)"

.PP
References create_node(), AVLNode::data, insert_node(), AVLTree::root, and AVLTree::size\&.
.PP
Referenced by create_edge(), create_vertex(), insert_node(), and test_insert()\&.
.SS "struct \fBAVLNode\fP* insert_node (struct \fBAVLNode\fP * node, struct \fBAVLNode\fP * insert)"

.PP
References balance(), AVLNode::height, AVLNode::id, insert(), AVLNode::left, left_rotate(), max_height(), AVLNode::right, and right_rotate()\&.
.PP
Referenced by insert()\&.
.SS "struct \fBAVLNode\fP* left_rotate (struct \fBAVLNode\fP * node)"

.PP
References AVLNode::height, AVLNode::left, max_height(), and AVLNode::right\&.
.PP
Referenced by insert_node(), and remove_node()\&.
.SS "int max_height (struct \fBAVLNode\fP * node)"

.PP
References AVLNode::height, AVLNode::left, and AVLNode::right\&.
.PP
Referenced by insert_node(), left_rotate(), remove_node(), and right_rotate()\&.
.SS "struct \fBAVLNode\fP* minNode (struct \fBAVLNode\fP * node)"

.PP
References AVLNode::left\&.
.PP
Referenced by remove_node()\&.
.SS "void postorder (struct \fBAVLTree\fP * tree, struct \fBstack\fP * stack)"

.PP
References postorder_nodes(), AVLTree::root, and AVLTree::size\&.
.SS "void postorder_nodes (struct \fBAVLNode\fP * node, struct \fBstack\fP * stack)"

.PP
References AVLNode::data, AVLNode::id, AVLNode::left, push(), and AVLNode::right\&.
.PP
Referenced by postorder()\&.
.SS "void preorder (struct \fBAVLTree\fP * tree, struct \fBstack\fP * stack)"

.PP
References preorder_nodes(), AVLTree::root, and AVLTree::size\&.
.PP
Referenced by destroy_graph_avl(), fire(), print_edges(), and run_single()\&.
.SS "void preorder_nodes (struct \fBAVLNode\fP * node, struct \fBstack\fP * stack)"

.PP
References AVLNode::data, AVLNode::id, AVLNode::left, push(), and AVLNode::right\&.
.PP
Referenced by preorder()\&.
.SS "void* remove_ID (struct \fBAVLTree\fP * tree, int id)"

.PP
References AVLNode::data, remove_node(), AVLTree::root, and AVLTree::size\&.
.PP
Referenced by create_edge(), remove_edge(), remove_edge_id(), remove_vertex(), and test_delete()\&.
.SS "struct \fBAVLNode\fP* remove_node (struct \fBAVLNode\fP * root, int id, void ** data)"

.PP
References balance(), AVLNode::data, AVLNode::height, AVLNode::id, AVLNode::left, left_rotate(), max_height(), minNode(), AVLNode::right, and right_rotate()\&.
.PP
Referenced by remove_ID()\&.
.SS "struct \fBAVLNode\fP* right_rotate (struct \fBAVLNode\fP * node)"

.PP
References AVLNode::height, AVLNode::left, max_height(), and AVLNode::right\&.
.PP
Referenced by insert_node(), and remove_node()\&.
.SS "void stackify (struct \fBAVLTree\fP * tree, struct \fBstack\fP * stack)"

.PP
References AVLTree::root, AVLTree::size, and stackify_nodes()\&.
.PP
Referenced by remove_vertex()\&.
.SS "void stackify_nodes (struct \fBAVLNode\fP * node, struct \fBstack\fP * stack)"

.PP
References AVLNode::data, AVLNode::height, AVLNode::left, push(), and AVLNode::right\&.
.PP
Referenced by stackify()\&.
.SH "Author"
.PP 
Generated automatically by Doxygen for Topologic from the source code\&.

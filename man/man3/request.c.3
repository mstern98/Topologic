.TH "src/request.c" 3 "Mon Mar 15 2021" "Version 1.0.6" "Topologic" \" -*- nroff -*-
.ad l
.nh
.SH NAME
src/request.c
.SH SYNOPSIS
.br
.PP
\fC#include '\&.\&./include/topologic\&.h'\fP
.br

.SS "Functions"

.in +1c
.ti -1c
.RI "struct \fBrequest\fP * \fBcreate_request\fP (enum \fBREQUESTS\fP \fBrequest\fP, void *args, void(*f)(void *))"
.br
.ti -1c
.RI "int \fBsubmit_request\fP (struct \fBgraph\fP *\fBgraph\fP, struct \fBrequest\fP *\fBrequest\fP)"
.br
.ti -1c
.RI "int \fBprocces_request\fP (struct \fBrequest\fP *\fBrequest\fP)"
.br
.ti -1c
.RI "int \fBprocess_requests\fP (struct \fBgraph\fP *\fBgraph\fP)"
.br
.ti -1c
.RI "int \fBdestroy_request\fP (struct \fBrequest\fP *\fBrequest\fP)"
.br
.in -1c
.SH "Function Documentation"
.PP 
.SS "struct \fBrequest\fP* create_request (enum \fBREQUESTS\fP request, void * args, void(*)(void *) f)"
@PARAM request: the desired request @PARAM args: the arguments needed for f @PARAM f: the function of the request @RETURN the request or NULL if it fails Creates a request structure to be called later 
.PP
References request::args, CREAT_BI_EDGE, CREAT_EDGE, CREAT_VERTEX, DESTROY_BI_EDGE, DESTROY_EDGE, DESTROY_EDGE_BY_ID, DESTROY_VERTEX, DESTROY_VERTEX_BY_ID, request::f, GENERIC, MOD_BI_EDGE, MOD_EDGE, MOD_EDGE_VARS, MOD_VERTEX, request::request, and topologic_debug\&.
.PP
Referenced by init(), setEdge(), setupSelfEdge(), setupVertex(), test_submit_request(), and vertexFunction()\&.
.SS "int destroy_request (struct \fBrequest\fP * request)"
@PARAM request: a request @RETURN -1 for fail; 0 for success Destroys and frees a request 
.PP
References request::args, request::f, request::request, and topologic_debug\&.
.PP
Referenced by destroy_graph_stack(), and test_destroy_request()\&.
.SS "int procces_request (struct \fBrequest\fP * request)"

.PP
References edge_request::a, destroy_edge_request::a, destroy_edge_id_request::a, request::args, edge_request::b, destroy_edge_request::b, CREAT_BI_EDGE, CREAT_EDGE, CREAT_VERTEX, create_bi_edge(), create_edge(), create_vertex(), DESTROY_BI_EDGE, DESTROY_EDGE, DESTROY_EDGE_BY_ID, DESTROY_VERTEX, DESTROY_VERTEX_BY_ID, mod_edge_vars_request::edge_vars, vertex_request::f, mod_vertex_request::f, request::f, edge_request::f, GENERIC, edge_request::glbl, vertex_request::glbl, mod_vertex_request::glbl, vertex_request::graph, destroy_vertex_request::graph, destroy_vertex_id_request::graph, destroy_edge_id_request::id, vertex_request::id, destroy_vertex_id_request::id, MOD_BI_EDGE, MOD_EDGE, MOD_EDGE_VARS, MOD_VERTEX, modify_bi_edge(), modify_edge(), modify_shared_edge_vars(), modify_vertex(), remove_bi_edge(), remove_edge(), remove_edge_id(), remove_vertex(), remove_vertex_id(), request::request, topologic_debug, mod_vertex_request::vertex, mod_edge_vars_request::vertex, and destroy_vertex_request::vertex\&.
.PP
Referenced by process_requests()\&.
.SS "int process_requests (struct \fBgraph\fP * graph)"
@PARAM graph: the graph @RETURN 0 if all got processed; -1 if a request failed will set ERRNO to the ENUM Process requests that are queued in the graph 
.PP
References graph::context, graph::lock, graph::modify, pop(), procces_request(), graph::remove_edges, graph::remove_vertices, SINGLE, and topologic_debug\&.
.PP
Referenced by init(), run(), run_single(), setupEdges(), setupSelfEdge(), setupVertex(), and test_process_requests()\&.
.SS "int submit_request (struct \fBgraph\fP * graph, struct \fBrequest\fP * request)"
@PARAM graph: the graph @PARAM request: the request to be processed @RETRUN -1 for fail; 0 for succes; Submits a request to be processed after all active nodes complete 
.PP
References graph::context, DESTROY_BI_EDGE, DESTROY_EDGE, DESTROY_EDGE_BY_ID, DESTROY_VERTEX, DESTROY_VERTEX_BY_ID, graph::lock, graph::modify, push(), graph::remove_edges, graph::remove_vertices, request::request, SINGLE, and topologic_debug\&.
.PP
Referenced by init(), setEdge(), setupSelfEdge(), setupVertex(), test_submit_request(), and vertexFunction()\&.
.SH "Author"
.PP 
Generated automatically by Doxygen for Topologic from the source code\&.

.TH "src/topologic.c" 3 "Mon Mar 15 2021" "Version 1.0.6" "Topologic" \" -*- nroff -*-
.ad l
.nh
.SH NAME
src/topologic.c
.SH SYNOPSIS
.br
.PP
\fC#include '\&.\&./include/topologic\&.h'\fP
.br

.SS "Functions"

.in +1c
.ti -1c
.RI "void \fBsleep_ms\fP (int milliseconds)"
.br
.ti -1c
.RI "int \fBstart_set\fP (struct \fBgraph\fP *\fBgraph\fP, int id[], int num_vertices)"
.br
.ti -1c
.RI "int \fBrun_single\fP (struct \fBgraph\fP *\fBgraph\fP, struct \fBvertex_result\fP **init_vertex_args)"
.br
.ti -1c
.RI "int \fBrun\fP (struct \fBgraph\fP *\fBgraph\fP, struct \fBvertex_result\fP **init_vertex_args)"
.br
.ti -1c
.RI "int \fBfire\fP (struct \fBgraph\fP *\fBgraph\fP, struct \fBvertex\fP *\fBvertex\fP, struct \fBvertex_result\fP *args, enum \fBSTATES\fP color, int iloop)"
.br
.ti -1c
.RI "void * \fBfire_pthread\fP (void *vargp)"
.br
.ti -1c
.RI "int \fBswitch_vertex\fP (struct \fBgraph\fP *\fBgraph\fP, struct \fBvertex\fP *\fBvertex\fP, struct \fBvertex_result\fP *args, enum \fBSTATES\fP color, int iloop)"
.br
.ti -1c
.RI "int \fBpause_graph\fP (struct \fBgraph\fP *\fBgraph\fP)"
.br
.ti -1c
.RI "int \fBresume_graph\fP (struct \fBgraph\fP *\fBgraph\fP)"
.br
.in -1c
.SH "Function Documentation"
.PP 
.SS "int fire (struct \fBgraph\fP * graph, struct \fBvertex\fP * vertex, struct \fBvertex_result\fP * args, enum \fBSTATES\fP color, int iloop)"
@PARAM graph: the graph @PARAM vertex: A vertex to be ran @PARAM args: arguments @PARAM color: the state in which unlocks fire process if STATE is set to PRINT then fire will fail @PARAM iloop: the number of times that vertex fired in succession @RETURNS the result of the vertex fire will wake up the vertex and pass args to the vertex to compute its function and then call switch and clean itself up 
.PP
References edge::a_vars, fireable::args, edge::b, edge::b_vars, BI_EDGE, edge::bi_edge_lock, BLACK, graph::black_fire, graph::black_locked, graph::black_vertex_count, fireable::color, graph::context, destroy_stack(), vertex_result::edge_argv, vertex::edge_tree, edge::edge_type, vertex::f, edge::f, fire(), edge::glbl, vertex::glbl, fireable::iloop, init_stack(), vertex::is_active, graph::lock, vertex::lock, graph::max_loop, graph::max_state_changes, NONE, graph::num_vertices, pop(), preorder(), PTHREAD_SLEEP_TIME, RED, graph::red_fire, graph::red_locked, graph::red_vertex_count, vertex::shared, sleep_ms(), graph::state, graph::state_count, SWITCH, SWITCH_UNSAFE, switch_vertex(), TERMINATE, topologic_debug, vertex_result::vertex_argv, and shared_edge::vertex_data\&.
.PP
Referenced by fire(), and fire_pthread()\&.
.SS "void* fire_pthread (void * vargp)"
Wrapper function for fire, fire_1 @PARAM vargp: arguments 
.PP
References fireable::args, fireable::color, fire(), fireable::graph, fireable::iloop, PTHREAD_SLEEP_TIME, sleep_ms(), topologic_debug, and fireable::vertex\&.
.PP
Referenced by run(), and switch_vertex()\&.
.SS "int pause_graph (struct \fBgraph\fP * graph)"
@PARAM graph: the graph @RETURN 0 for success -1 if it fails Pauses run 
.PP
References graph::lock, graph::pause, graph::pause_cond, and topologic_debug\&.
.SS "int resume_graph (struct \fBgraph\fP * graph)"
@PARAM graph: the graph @RETURN 0 for success -1 if it fails Resumes run 
.PP
References graph::lock, graph::pause, and topologic_debug\&.
.SS "int run (struct \fBgraph\fP * graph, struct \fBvertex_result\fP ** vertex_args)"
@PARAM graph: the graph @PARAM vertex_args: array of vertex arguments for f @RETURN 0 if run terminates normally -1 if it fails Attempts to run the graph else aborts\&. 
.PP
References ABORT, fireable::args, BLACK, graph::black_fire, graph::black_locked, graph::black_vertex_count, fireable::color, graph::color_lock, graph::context, CONTINUE, fire_pthread(), fireable::graph, fireable::iloop, vertex::is_active, graph::lock, MAX_ATTEMPTS, graph::max_state_changes, graph::mem_option, graph::num_vertices, graph::pause, graph::pause_cond, pop(), graph::previous_color, PRINT, graph::print_flag, print_graph(), process_requests(), RED, graph::red_fire, graph::red_locked, graph::red_vertex_count, run_single(), SINGLE, graph::start, graph::state, graph::state_count, TERMINATE, THREAD_ATTEMPT_SLEEP, topologic_debug, fireable::vertex, and WAIT\&.
.PP
Referenced by runTest(), test_run_none(), test_run_single(), and test_run_switch()\&.
.SS "int run_single (struct \fBgraph\fP * graph, struct \fBvertex_result\fP ** init_vertex_args)"

.PP
References edge::a_vars, edge::b, edge::b_vars, graph::context, destroy_stack(), vertex_result::edge_argv, vertex::edge_tree, vertex::f, edge::f, edge::glbl, vertex::glbl, init_stack(), vertex::is_active, stack::length, graph::lock, graph::max_loop, graph::max_state_changes, graph::num_vertices, graph::pause, graph::pause_cond, pop(), preorder(), print_graph(), process_requests(), vertex::shared, SINGLE, graph::start, graph::state, graph::state_count, TERMINATE, topologic_debug, vertex_result::vertex_argv, and shared_edge::vertex_data\&.
.PP
Referenced by run()\&.
.SS "void sleep_ms (int milliseconds)"

.PP
Referenced by fire(), and fire_pthread()\&.
.SS "int start_set (struct \fBgraph\fP * graph, int id[], int num_vertices)"
@PARAM graph: the graph, @PARAM id: the ids of the vertices @PARAM num_vertices: number of vertices @RETURN -1 for fail if any vertex fails; 0 for success Creates multiple contexts that are ran in parallel Handle errors
.PP
Given vertx failed, so at this point, free the vertices and leave
.PP
References graph::context, find(), vertex::id, pop(), push(), SINGLE, graph::start, topologic_debug, and graph::vertices\&.
.PP
Referenced by runTest(), setup_start_set(), and setupSelfEdge()\&.
.SS "int switch_vertex (struct \fBgraph\fP * graph, struct \fBvertex\fP * vertex, struct \fBvertex_result\fP * args, enum \fBSTATES\fP color, int iloop)"
@PARAM graph: the graph @PARAM vertex: The vertex in which just fire @PARAM args; The result of the vertex Upon call the switch function will compute the edge functions connected to the vertex @PARAM iloop: the number of times that vertex fired in succession @RETURNS 0 On success; the vertex connected to the successful edge will be fired; -1 on failure 
.PP
References ABORT, fireable::args, fireable::color, CONTINUE, vertex_result::edge_argv, vertex_result::edge_size, fire_pthread(), fireable::graph, fireable::iloop, MAX_ATTEMPTS, graph::mem_option, THREAD_ATTEMPT_SLEEP, topologic_debug, fireable::vertex, vertex_result::vertex_argv, vertex_result::vertex_size, and WAIT\&.
.PP
Referenced by fire()\&.
.SH "Author"
.PP 
Generated automatically by Doxygen for Topologic from the source code\&.
